# .golangci.yml
# Default configuration for golangci-lint for generated {{ .MixinNameCap }} mixins

run:
  # Timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m
  # Exit code when issues were found (0-255)
  issues-exit-code: 1
  # Include test files or not
  tests: true
  # List of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - integration
  # Which dirs to skip: issues from them won't be reported. Default is empty list.
  skip-dirs:
    - bin
    - vendor
  # Which files to skip: they will be analyzed, but issues from them won't be reported. Default is empty list.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - path/to/file.go

linters-settings:
  govet:
    # Enable all analyzers
    enable-all: true
    # Disable specific analyzers
    disable:
      - fieldalignment # Often noisy, can be enabled if struct alignment is critical
      - shadow # Can be useful but sometimes flags intentional shadowing
    # Settings per analyzer
    settings:
      printf: # Analyzer name
        funcs: # Functions to check
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  gocyclo:
    # Minimal code complexity to report, 30 is high. Default: 10
    min-complexity: 15
  maligned:
    # Suggest optimal struct field order for memory layout. Optional.
    suggest-new: true
  goconst:
    # Minimal length of string constant that should be reported. Default: 3
    min-len: 3
    # Minimal occurrences of string constant that should be reported. Default: 3
    min-occurrences: 3
  misspell:
    # Correct commonly misspelled English words in comments.
    locale: US
  lll:
    # Max line length, lines longer will be reported. Default: 120
    line-length: 140
  unused:
    # Enable checking for unused constants, variables, functions, types, and fields.
    check-exported: false # Set to true for stricter checks on exported symbols
  unparam:
    # Reports unused function parameters.
    check-exported: false # Set to true for stricter checks on exported functions
  gocritic:
    # Enable specific checks. Example: enable "#diagnostic" tags check.
    enabled-tags:
      - diagnostic
      - experimental # Use with caution
      - opinionated
      - performance
      - style
    disabled-tags:
      - deprecated # Often noisy if dependencies use deprecated APIs
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`. Default: false
    check-type-assertions: true
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`. Default: false
    check-blank: true

linters:
  # Disable all linters by default and enable only specific ones
  disable-all: true
  enable:
    # Core Go linters
    - govet
    - errcheck
    - staticcheck
    - unused
    - gosimple
    - structcheck
    - varcheck
    - ineffassign
    - typecheck
    # Style & Complexity
    - gocyclo
    - gocognit # Consider enabling if cognitive complexity is a concern
    - goconst
    - gocritic
    - gofmt
    - goimports # Enforces goimports formatting
    - lll
    - misspell
    # Performance & Best Practices
    - prealloc # Suggests slice pre-allocation
    - unparam
    # - maligned # Optional: checks struct field alignment
    # - bodyclose # Checks for unclosed HTTP response bodies
    # - durationcheck # Checks for inefficient time duration comparisons
    # - exportloopref # Checks for pointers to loop variables captured by closures
    # - makezero # Checks for `make` calls with non-zero length/capacity

issues:
  # Maximum issues count per linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
  # Exclude rules
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # Example: Exclude specific error messages globally
    # - text: "G104: Errors unhandled" # Example: If you handle errors differently
    #   linters:
    #     - gosec

# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|html|junit-xml|github-actions
  # Default: colored-line-number
  format: colored-line-number
  # Print lines of code with issue. Default: true
  print-issued-lines: true
  # Print linter name in the end of issue text. Default: true
  print-linter-name: true
  # Make issues output unique by line. Default: true
  uniq-by-line: true
