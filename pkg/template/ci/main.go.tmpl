//go:build dagger

package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"path/filepath"

	"dagger.io/dagger"
)

// Define constants for Go version and image
const (
	// TODO: Consider making goVersion a template variable if needed
	goVersion = "1.23" // Keep in sync with mixin's go.mod
	goImage   = "golang:" + goVersion + "-alpine"
	mixinName = "{{ .MixinName }}" // Use template variable
)

// Define pinned tool versions (update as needed)
const (
	gosecVersion       = "v2.19.0"
	govulncheckVersion = "v1.1.1"
	mageVersion        = "v1.15.0"
	goreleaserVersion  = "v2.1.0"
	cosignVersion      = "v2.2.4"
)

func main() {
	// Define flags
	task := flag.String("task", "ci", "Task to run: ci (test & build) or release")
	flag.Parse()

	ctx := context.Background()

	// Initialize Dagger client
	client, err := dagger.Connect(ctx, dagger.WithLogOutput(os.Stderr))
	if err != nil {
		fmt.Printf("Error connecting to Dagger engine: %v\n", err)
		os.Exit(1)
	}
	defer client.Close()

	// Execute the requested task
	switch *task {
	case "ci":
		fmt.Println("Running CI tasks (test & build)...")
		if err := runCI(ctx, client); err != nil {
			fmt.Printf("CI task failed: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("CI tasks completed successfully!")
	case "release":
		fmt.Println("Running Release task...")
		// Get GITHUB_TOKEN from environment
		githubToken := os.Getenv("GITHUB_TOKEN")
		if githubToken == "" {
			fmt.Println("Error: GITHUB_TOKEN environment variable is required for release")
			os.Exit(1)
		}
		if err := release(ctx, client, githubToken); err != nil {
			fmt.Printf("Release task failed: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("Release task completed successfully!")
	default:
		fmt.Printf("Error: Unknown task '%s'. Valid tasks are 'ci' or 'release'.\n", *task)
		os.Exit(1)
	}
}

// runCI executes the standard CI steps (test, build)
func runCI(ctx context.Context, client *dagger.Client) error {
	fmt.Println("--> Running tests...")
	if err := test(ctx, client); err != nil {
		return fmt.Errorf("testing failed: %w", err)
	}
	fmt.Println("--> Tests passed!")

	fmt.Println("--> Building artifacts (example: linux/amd64)...")
	// Example: Build for linux/amd64 for verification during CI
	artifactsDir := "build-output"
	if err := build(ctx, client, "linux", "amd64", artifactsDir); err != nil {
		return fmt.Errorf("build failed: %w", err)
	}
	fmt.Printf("--> Build artifacts generated in ./%s\n", artifactsDir)
	return nil
}

// test runs linters and unit tests for the mixin
func test(ctx context.Context, client *dagger.Client) error {
	src := projectSource(client)

	// Create a Go container
	golang := goContainer(client, src)

	// Install tools
	golang = golang.
		WithExec([]string{"apk", "add", "--no-cache", "git", "build-base"}).
		WithExec([]string{"go", "install", "github.com/securego/gosec/v2/cmd/gosec@" + gosecVersion}).
		WithExec([]string{"go", "install", "golang.org/x/vuln/cmd/govulncheck@" + govulncheckVersion}).
		WithExec([]string{"go", "install", "github.com/magefile/mage@" + mageVersion}).
		WithExec([]string{"go", "install", "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"}) // Lint tool

	// Run linters (using mage target or direct command)
	// Assuming mage Lint target exists and uses .golangci.yml
	fmt.Println("----> Running Linters...")
	_, err := golang.WithExec([]string{"mage", "Lint"}).Sync(ctx)
	if err != nil {
		return fmt.Errorf("linting failed: %w", err)
	}

	// Run unit tests (using mage target)
	fmt.Println("----> Running Unit Tests...")
	_, err = golang.WithExec([]string{"mage", "TestUnit"}).Sync(ctx)
	if err != nil {
		return fmt.Errorf("unit tests failed: %w", err)
	}

	// Run integration tests (using mage target)
	fmt.Println("----> Running Integration Tests...")
	_, err = golang.WithExec([]string{"mage", "TestIntegration"}).Sync(ctx)
	if err != nil {
		// Integration tests might be expected to fail locally without setup
		fmt.Printf("----> Integration tests failed (might require setup): %v\n", err)
		// Decide whether to fail the CI step based on integration test failure
		// return fmt.Errorf("integration tests failed: %w", err)
	}

	return nil
}

// build compiles the mixin for a specific platform
func build(ctx context.Context, client *dagger.Client, goos, goarch, outputDir string) error {
	src := projectSource(client)
	golang := goContainer(client, src).
		WithEnvVariable("GOOS", goos).
		WithEnvVariable("GOARCH", goarch).
		WithEnvVariable("CGO_ENABLED", "0")

	// Build the binary
	outputPath := filepath.Join("/src", outputDir, fmt.Sprintf("%s-%s-%s", mixinName, goos, goarch))
	golang = golang.WithExec([]string{
		"go", "build",
		"-ldflags", "-s -w",
		"-o", outputPath,
		"./cmd/" + mixinName,
	})

	// Extract the built binary
	output := client.Directory().WithDirectory(outputDir, golang.Directory(filepath.Join("/src", outputDir)))
	_, err := output.Export(ctx, ".")
	if err != nil {
		return fmt.Errorf("failed to export build artifact: %w", err)
	}
	return nil
}

// release runs goreleaser within a Dagger container for the mixin
func release(ctx context.Context, client *dagger.Client, githubToken string) error {
	fmt.Println("--> Preparing GoReleaser container...")
	src := projectSource(client)

	// Use a container with Go and Git installed
	goreleaser := goContainer(client, src).
		WithExec([]string{"apk", "add", "--no-cache", "git", "build-base"})

	// Install GoReleaser & Cosign
	goreleaser = goreleaser.
		WithExec([]string{"go", "install", "github.com/goreleaser/goreleaser@" + goreleaserVersion}).
		WithExec([]string{"go", "install", "github.com/sigstore/cosign/v2/cmd/cosign@" + cosignVersion})

	// Run GoReleaser release command
	githubTokenSecret := client.SetSecret("github-token", githubToken)

	fmt.Println("--> Running GoReleaser...")
	goreleaser = goreleaser.
		WithSecretVariable("GITHUB_TOKEN", githubTokenSecret).
		WithExec([]string{"goreleaser", "release", "--clean"}) // Use the mixin's .goreleaser.yml

	// Execute the command
	_, err := goreleaser.Sync(ctx)
	if err != nil {
		return fmt.Errorf("goreleaser execution failed: %w", err)
	}

	fmt.Println("--> GoReleaser finished successfully.")
	return nil
}

// goContainer sets up a basic Go container with caching and source mount
func goContainer(client *dagger.Client, src *dagger.Directory) *dagger.Container {
	return client.Container().From(goImage).
		WithMountedCache("/go/pkg/mod", client.CacheVolume("go-mod")).
		WithMountedCache("/go/build-cache", client.CacheVolume("go-build")).
		WithEnvVariable("GOMODCACHE", "/go/pkg/mod").
		WithEnvVariable("GOCACHE", "/go/build-cache").
		WithWorkdir("/src").
		WithMountedDirectory("/src", src)
}

// projectSource returns the host project directory mounted in the container
func projectSource(client *dagger.Client) *dagger.Directory {
	// Assumes the Dagger pipeline is run from the root of the generated mixin project
	src := client.Host().Directory(".", dagger.HostDirectoryOpts{
		Exclude: []string{"ci/build-output/", "bin/"},
	})
	return src
}
