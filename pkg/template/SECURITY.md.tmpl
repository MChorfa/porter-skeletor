# Security Policy for {{ .MixinNameCap }} Mixin

## Supported Versions

We aim to provide security updates for the latest minor release of each major version.

| Version | Supported          |
| ------- | ------------------ |
| 1.x.y   | :white_check_mark: |
| < 1.0   | :x:                |

## Reporting a Vulnerability

We take security seriously. If you discover a security vulnerability within this mixin, please report it to us privately.

**Do NOT report security vulnerabilities through public GitHub issues.**

Instead, please email the maintainer(s) directly{{ if .AuthorEmail }} at {{ .AuthorEmail }}{{ end }} (or follow the primary organization's security reporting process if applicable). You can typically find maintainer information in the `go.mod` file or the main repository's README.

Please include the following details in your report:

*   A description of the vulnerability and its potential impact.
*   Steps to reproduce the vulnerability.
*   Any relevant code snippets or configuration examples.
*   Your name and contact information (optional).

We will acknowledge receipt of your vulnerability report within 48 hours and aim to provide a fix or mitigation plan as soon as possible. We appreciate your efforts to disclose vulnerabilities responsibly.

## Security Practices

*   We use `govulncheck` to scan for known vulnerabilities in dependencies during CI.
*   We encourage the use of static analysis tools like `gosec` (though not enforced by default in this template).
*   Dependencies are managed using Go modules and reviewed periodically.

{{ if eq .ComplianceLevel "slsa-l3" }}
## Build Integrity & Provenance (SLSA Level 3)

This project generates SLSA Level 3 provenance attestations for its official releases. This provides evidence about how the software artifacts were built, helping to ensure their integrity.

You can verify the provenance of released artifacts using tools compatible with the [SLSA framework](https://slsa.dev/), such as the official `slsa-verifier`. Provenance information is typically attached to the GitHub release.

## Binary Signing (SLSA Level 3)

Official release artifacts (binaries, archives) are signed using [Cosign](https://github.com/sigstore/cosign) with keyless signing (via Sigstore's Fulcio root CA). This allows users to verify the authenticity and integrity of the downloaded artifacts.

To verify a signature, you can use the `cosign verify` command. Signatures and certificates are typically attached to the GitHub release alongside the artifacts. Example verification (replace artifact name):

```bash
# Verify binary signature (requires cosign installation)
COSIGN_EXPERIMENTAL=1 cosign verify --certificate-oidc-issuer https://accounts.google.com --certificate-identity <MAINTAINER_EMAIL_OR_IDENTITY> {{ .MixinName }}_linux_amd64
```
(Note: Adjust the `--certificate-identity` based on the actual identity used for signing in the release workflow).
{{ end }}
