# .goreleaser.yml for the generated {{ .MixinNameCap }} mixin
# This file will be used by the mixin's own CI/CD pipeline (e.g., .github/workflows/mixin-ci.yml.tmpl)
# to release the mixin binaries.

# Project metadata - uses template variables
project_name: {{ .MixinName }}

# Environment variables for the build
env:
  - CGO_ENABLED=0

# Build configuration for the mixin binary
builds:
  - id: {{ .MixinName }}-mixin # Unique ID for this build
    main: ./cmd/{{ .MixinName }} # Path to the mixin's main package
    binary: {{ .MixinName }} # Output binary name
    ldflags: # Linker flags
      - -s -w
      # Embed version info (requires version variables in the mixin's main package)
      - -X {{ .ModulePath }}/pkg/{{ .MixinName }}.clientVersion={{ .Version }}
      # Add other version info if available/needed
      # - -X {{ .ModulePath }}/pkg/{{ .MixinName }}.commit={{ .Commit }}
      # - -X {{ .ModulePath }}/pkg/{{ .MixinName }}.date={{ .Date }}
    goos: # Target operating systems
      - linux
      - darwin
      - windows
    goarch: # Target architectures
      - amd64
      - arm64
    {{- if eq .ComplianceLevel "slsa-l3" }}
    # SLSA Provenance generation for the mixin (explicitly enabled for L3)
    # Requires id-token: write permission in the CI workflow
    slsa:
      provenance: true
    {{- end }}

# Archive configuration (creates .tar.gz and .zip files for the mixin)
archives:
  - id: {{ .MixinName }}-archives
    builds: # Reference the mixin build ID
      - {{ .MixinName }}-mixin
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    format_overrides: # Use zip for windows
      - goos: windows
        format: zip
    files: # Include relevant files for the mixin release
      - LICENSE
      - README.md

# Checksum generation
checksum:
  name_template: 'checksums.txt'

# SBOM generation (CycloneDX and SPDX formats)
sboms:
  - # Generate SBOMs for the mixin binary
    id: sbom-mixin-binary
    artifacts: binary
    documents:
      - "{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}.cdx.json"
      - "{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}.spdx.json"
  # - # Uncomment if mixin Docker images are enabled below
  #   id: sbom-mixin-docker
  #   artifacts: docker
  #   documents:
  #     - "{{ .ImageName }}.cdx.json"
  #     - "{{ .ImageName }}.spdx.json"

# Snapshot configuration (for testing mixin releases)
snapshot:
  name_template: "{{ incpatch .Version }}-next"

# Changelog generation for the mixin
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^chore:'
      - Merge pull request
      - Merge branch

{{- if eq .ComplianceLevel "slsa-l3" }}
# Signing configuration (using Cosign) for the mixin artifacts (SLSA L3)
# Requires id-token: write permission in the mixin's CI workflow
signs:
  - id: cosign-keyless-mixin
    cmd: cosign
    env:
      - COSIGN_EXPERIMENTAL=1
    args:
      - "sign-blob"
      - "--output-signature=${signature}"
      - "--output-certificate=${certificate}"
      - "${artifact}"
    artifacts: all # Sign all mixin artifacts
    output: true
{{- end }}

# GitHub Release configuration for the mixin
release:
  # Repo details are usually inferred from the mixin's git remote
  # github:
  #   owner: {{ .AuthorName }} # Example if needed, usually inferred
  #   name: {{ .MixinName }}
  homepage: "https://github.com/{{ .AuthorName }}/{{ .MixinName }}" # Explicit homepage URL
  description: "{{ .Description }}" # Explicit description
  draft: false
  prerelease: auto

# Optional: Docker configuration if the mixin itself needs to be containerized
# (Distinct from the generator tool's Docker image)
# dockers:
#   - ids:
#       - {{ .MixinName }}-mixin
#     goos: linux
#     goarch: amd64
#     image_templates:
#       - "ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:{{ .Version }}-amd64"
#       - "ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:latest-amd64"
#     dockerfile: Dockerfile # Uses the Dockerfile generated in the mixin repo
#     build_flag_templates:
#       - "--label=org.opencontainers.image.title={{ .MixinName }}"
#       - "--label=org.opencontainers.image.version={{ .Version }}"
#       - "--build-arg=MIXIN_NAME={{ .MixinName }}"
#     use: buildx
#     push: true # Requires docker login in the mixin's CI

# docker_manifests:
#   - name_template: ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:{{ .Version }}
#     image_templates:
#       - ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:{{ .Version }}-amd64
#       - ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:{{ .Version }}-arm64
#   - name_template: ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:latest
#     image_templates:
#       - ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:latest-amd64
#       - ghcr.io/{{ .AuthorName | lower }}/{{ .MixinName }}:latest-arm64
